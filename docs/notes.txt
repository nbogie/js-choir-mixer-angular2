Notes:

* uses some code from 
http://webaudiodemos.appspot.com/oscilloscope/index.html
to detect first positive zero-crossing of the waveform, in order to try to display a stable wave.

"For longer sounds, such as music soundtracks, streaming should be used with the audio element and MediaElementAudioSourceNode." - http://www.w3.org/TR/webaudio/#AudioContext-section

Section loops could be implemented using the existing loop, loopStart, loopEnd parameters in start().  "the AudioBuffer is at a specific sample-rate (usually the same as the AudioContext sample-rate), and that the loop times (in seconds) must be converted to the appropriate sample-frame positions in the buffer according to this sample-rate." - http://www.w3.org/TR/webaudio/#looping-AudioBufferSourceNode

Only the buffersource nodes need to be recreated after a stop or move.  We can keep the gain nodes and analyser nodes all in place.

This doesn't have many methods.  I think we manipulate the underlying 
"HTMLMediaElement.currentTime
The current playback time, in seconds. Setting this value seeks the media to the new time.""
- https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement

A self-closed script tag <script src="foo.js" /> will cause silent failure.
Forgetting to return something an a list.map(function(elem)) { elem; }); will give you null back instead of a "collected" list.

Adding padding to an element will make its hit rectangle bigger even if it is not visibly being padded, and may have that element handle clicks for other elements EVEN though the user appears to be clearly clicking on the other elems.  E.g. I had a span element with padding 20px inside an li, and the li had a click handler.  I created a list of these.  Clicks on the higher ones were being intercepted by the lower ones (those created later, I suppose).

"When oscillatorL stops playing, it gets disconnected from mergerNode and deleted. The browser is allowed to do this because – as you recall – an OscillatorNode or AudioBufferSourceNode can only be used once, so after we call oscillatorL.stop(), oscillatorL becomes unusable." - http://blog.szynalski.com/2014/04/02/web-audio-api/